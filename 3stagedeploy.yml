# Trigger configuration: Configure when to trigger the pipeline
trigger:
  branches:
    include:
      - main

  # Paths configuration: Specifies the paths of files to include in the trigger
  paths:
    include:
      - variables.tf
      - infra.tf
      - resource_group.tf
      - storage_account.tf
      - storage_container.tf
      - key_vault.tf
      - key_vault_secrets.tf
      - admin_user.tf
      - virtual_network.tf
      - virtual_network_subnet.tf
      - network_interface.tf
      - virtual_machine.tf
      - public_ip.tf
      - network_security_group.tf
      - network_interface_security_group_association.tf

# Pool configuration: Define the build agent pool
pool:
  vmImage: $(BuildAgent)

# Variables definition: Define variables used in the pipeline
variables:
  - group: hawaVB
  - name: workingDir
    value: $(System.DefaultWorkingDirectory)
  - name: ASysDir
    value: $(System.ArtifactsDirectory)
  - name: artifactName
    value: TfazPubArtifact
  - name: ASDir
    value: $(build.artifactstagingdirectory)
  - name: BuildAgent
    value: ubuntu-latest
  - name: tf_vr
    value: latest
  - name: azdoEndP
    value: azdo-tfaz-conn
  - name: TFplanDir
    value: TfazPlan

# Parameters definition: Define parameters to customize the pipeline
parameters:
  - name: envName
    displayName: Select Environment
    type: string
    default: dev
    values:
      - prod
      - dev
      - qa

  - name: actionsToPerform
    displayName: Deploy or Destroy
    type: string
    default: Deploy
    values:
      - Deploy

# Configuration: Publish stage to validate and publish the Terraform plan
stages:
  - stage: Publish_Plan
    jobs:
      - job: Publish
        displayName: "Publish"
        steps:
          # Install Terraform Installer
          - task: TerraformInstaller@0
            displayName: "Install Terraform | Latest Version"
            inputs:
              terraformVersion: "$(tf_vr)"

          # Terraform Init
          - task: TerraformCLI@0
            displayName: "Terraform init"
            inputs:
              command: "init"
              backendType: "azurerm"
              workingDirectory: "$(workingDir)"
              backendServiceArm: "$(azdoEndP)"
              backendAzureRmResourceGroupName: "$(RGName)"
              backendAzureRmStorageAccountName: "$(STGName)"
              backendAzureRmContainerName: "$(ContName)"
              backendAzureRmKey: "$(TFStatefileName)"

          # Terraform Validate
          - task: TerraformCLI@0
            displayName: "Terraform Validate"
            inputs:
              backendType: "azurerm"
              command: "validate"

          # Terraform Plan
          - task: TerraformCLI@0
            displayName: "Terraform Plan"
            inputs:
              backendType: "azurerm"
              workingDirectory: "$(workingDir)"
              command: "plan"
              commandOptions: "--out=TfazBuildPlan"
              environmentServiceName: "$(azdoEndP)"
              publishPlanResults: "TfazBuildPlan"

  # Configuration: Build stage to create artifacts for the Terraform plan
  - stage: Build_Artifact_Plan
    jobs:
      - job: Build
        displayName: "Build"
        steps:
          # Install Terraform Installer
          - task: TerraformInstaller@0
            displayName: "Install Terraform | Latest Version"
            inputs:
              terraformVersion: "$(tf_vr)"

          # Terraform Init
          - task: TerraformCLI@0
            displayName: "Terraform Init"
            inputs:
              command: "init"
              backendType: "azurerm"
              workingDirectory: "$(workingDir)"
              backendServiceArm: "$(azdoEndP)"
              backendAzureRmResourceGroupName: "$(RGName)"
              backendAzureRmStorageAccountName: "$(STGName)"
              backendAzureRmContainerName: "$(ContName)"
              backendAzureRmKey: "$(TFStatefileName)"

          # Terraform Validate
          - task: TerraformCLI@0
            displayName: "Terraform Validate"
            inputs:
              backendType: "azurerm"
              command: "validate"

          # Terraform Plan
          - task: TerraformCLI@0
            displayName: "Terraform Plan"
            inputs:
              backendType: "azurerm"
              workingDirectory: "$(workingDir)"
              command: "plan"
              commandOptions: "--out=TfazBuildPlan"
              environmentServiceName: "$(azdoEndP)"

          # Create folder for the ASD
          - task: PowerShell@2
            displayName: Create folder for the ASD
            inputs:
              targetType: "inline"
              script: |
                New-Item -Path $(ASDir)/$(TFplanDir) -ItemType Directory

          # Copy Files to Artifact staging Directory
          - task: CopyFiles@2
            displayName: "Copy files to Artifact staging Directory"
            inputs:
              SourceFolder: "$(workingDir)"
              Contents: |
                **/*.tf
                **/*.tfvars
                **/*.TfazBuildPlan
              TargetFolder: "$(ASDir)/$(TFplanDir)"

          # Publish the Artifact
          - task: PublishBuildArtifacts@1
            displayName: Publish Artifacts
            inputs:
              TargetPath: "$(ASDir)/$(TFplanDir)"
              ArtifactName: "$(artifactName)"

  - stage: AdminValidation
    displayName: Wait for AdminValidation
    jobs:
      - job: DummyJob
        displayName: DummyJobForValidationProccess
        steps:
          - script: echo "This is run to allow for validation proccess to run"

      - job: WaitforAdminValidation
        displayName: Wait for AdminValidation
        pool: server
        timeoutInMinutes: 4320
        steps:
          - task: ManualValidation@0
            displayName: Manual Intervention Approve | Reject
            inputs:
              instructions: "Please review the request"
              notifyUsers: "" # Add user email or leave ""
              onTimeout: reject

  # Configuration: Deploy stage to apply the Terraform plan
  - stage: Deploy
    condition: |
      and(succeeded(),
      eq('${{ parameters.actionsToPerform }}', 'Deploy'),
      or(eq(variables['build.sourceBranch'], 'refs/heads/main'),
        eq(variables['build.sourceBranch'], 'refs/heads/dev'),
        eq(variables['build.sourceBranch'], 'refs/heads/prod'),
        eq(variables['build.sourceBranch'], 'refs/heads/qa')
        ),
        in(dependencies.AdminValidation.result, 'Succeeded')
      )
    dependsOn: AdminValidation
    jobs:
      - deployment:
        displayName: Deploy
        environment: "${{ parameters.envName }}"
        pool:
          vmImage: $(BuildAgent)
        strategy:
          runOnce:
            deploy:
              steps:
                # Download Artifacts
                - task: DownloadBuildArtifacts@0
                  displayName: Download Artifact
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "$(artifactName)"
                    downloadPath: "$(ASysDir)"

                # Install Terraform Installer
                - task: TerraformInstaller@0
                  displayName: "Install Terraform | Latest Version"
                  inputs:
                    terraformVersion: "$(tf_vr)"

                # Terraform Init
                - task: TerraformCLI@0
                  displayName: "Terraform init"
                  inputs:
                    command: "init"
                    backendType: "azurerm"
                    workingDirectory: "$(ASysDir)/$(artifactName)/$(TFplanDir)"
                    backendServiceArm: "$(azdoEndP)"
                    backendAzureRmResourceGroupName: "$(RGName)"
                    backendAzureRmStorageAccountName: "$(STGName)"
                    backendAzureRmContainerName: "$(ContName)"
                    backendAzureRmKey: "$(TFStatefileName)"

                # Terraform Apply
                - task: TerraformCLI@0
                  displayName: Terraform Apply
                  inputs:
                    command: "apply"
                    backendType: "azurerm"
                    workingDirectory: "$(ASysDir)/$(artifactName)/$(TFplanDir)"
                    environmentServiceName: "$(azdoEndP)"
